float pTerm, iTerm, dTerm;
int error;
int previousError;
float  kp = 11; //11
float ki = 0;
float kd = 11; //11
float output;
int integral,  derivative;
int irSensors[] = {A0, A1, A2, A3, A4}; //IR sensor pins
int irReadings[5];
#define ENA 5
#define IN1 6
#define IN2 7
#define IN3 8
#define IN4 9
#define ENB 10

#define S5 A0
#define S4 A1
#define S3 A2
#define S2 A3
#define S1 A4

int  motor1newSpeed;
int motor2newSpeed;
int motor2Speed = 70; //Default 70
int  motor1Speed = 120; //Default 120

void setup() {

  pinMode(ENA, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);

  pinMode(S5, INPUT);
  pinMode(S4, INPUT);
  pinMode(S3, INPUT);
  pinMode(S2, INPUT);
  pinMode(S1, INPUT);

}

void  loop() {
  //Put all of our functions here
  readIRSensors();
  calculateError();
  pidCalculations();
  changeMotorSpeed();
}

void readIRSensors() {
  //Read the IR sensors and put the readings in irReadings array
  for (int pin  = 0; pin < 5; pin++) {
    int pinNum = irSensors[pin];
    irReadings[pin]  = digitalRead(pinNum);
  }
}

void calculateError() {
  //Determine  an error based on the readings
  if ((irReadings[0] == 0) && (irReadings[1] ==  0) && (irReadings[2] == 0) && (irReadings[3] == 0) && (irReadings[4] == 1)) {
    error = 4;
  } else if ((irReadings[0] == 0) && (irReadings[1] == 0) && (irReadings[2]  == 0) && (irReadings[3] == 1) && (irReadings[4] == 1)) {
    error = 3;
  }  else if ((irReadings[0] == 0) && (irReadings[1] == 0) && (irReadings[2] == 0) &&  (irReadings[3] == 1) && (irReadings[4] == 0)) {
    error = 2;
  } else if  ((irReadings[0] == 0) && (irReadings[1] == 0) && (irReadings[2] == 1) && (irReadings[3]  == 1) && (irReadings[4] == 0)) {
    error = 1;
  } else if ((irReadings[0]  == 0) && (irReadings[1] == 0) && (irReadings[2] == 1) && (irReadings[3] == 0) &&  (irReadings[4] == 0)) {
    error = 0;
  } else if ((irReadings[0] == 0) &&  (irReadings[1] == 1) && (irReadings[2] == 1) && (irReadings[3] == 0) && (irReadings[4]  == 0)) {
    error = -1;
  } else if ((irReadings[0] == 0) && (irReadings[1]  == 1) && (irReadings[2] == 0) && (irReadings[3] == 0) && (irReadings[4] == 0)) {
    error = -2;
  } else if ((irReadings[0] == 1) && (irReadings[1] == 1) &&  (irReadings[2] == 0) && (irReadings[3] == 0) && (irReadings[4] == 0)) {
    error  = -3;
  } else if ((irReadings[0] == 1) && (irReadings[1] == 0) && (irReadings[2]  == 0) && (irReadings[3] == 0) && (irReadings[4] == 0)) {
    error = -4;
  } else if ((irReadings[0] == 0) && (irReadings[1] == 0) && (irReadings[2] == 0)  && (irReadings[3] == 0) && (irReadings[4] == 0)) {
    if (previousError == -4)  {
      error = -5;
    } else {
      error = 5;
    }
  } else  if ((irReadings[0] == 1) && (irReadings[1] == 1) && (irReadings[2] == 1) && (irReadings[3]  == 1) && (irReadings[4] == 1)) {
    error = 0;
  }
}

void pidCalculations()  {
  pTerm = kp * error;
  integral += error;
  iTerm = ki * integral;
  derivative = error - previousError;
  dTerm = kd * derivative;
  output  = pTerm + iTerm + dTerm;
  previousError = error;
}

void changeMotorSpeed()  {
  //Change motor speed of both motors accordingly
  motor2newSpeed = motor2Speed  + output;
  motor1newSpeed = motor1Speed - output;
  //Constrain the new speed  of motors to be between the range 0-255
  constrain(motor2newSpeed, 0, 255);
  constrain(motor1newSpeed, 0, 255);
  //Set new speed, and run motors in forward  direction
   analogWrite(ENA, motor2newSpeed);
  analogWrite(ENB, motor1newSpeed);
}

