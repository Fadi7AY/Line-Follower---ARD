// Pin definitions
#define ENA 5
#define IN1 6
#define IN2 7
#define IN3 8
#define IN4 9
#define ENB 10

#define S5 A0
#define S4 A1
#define S3 A2
#define S2 A3
#define S1 A4

// Calibration values for motor speeds
const int MAX_SPEED = 255; // Maximum speed
const int BASE_SPEED = 150; // Base speed for both motors
const int CORRECTION_FACTOR = 30; // Correction factor for proportional control

void setup() {
  pinMode(ENA, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);

  pinMode(S5, INPUT);
  pinMode(S4, INPUT);
  pinMode(S3, INPUT);
  pinMode(S2, INPUT);
  pinMode(S1, INPUT);

  Serial.begin(9600); // Optional: for debugging
}

void loop() {
  int s1 = digitalRead(S1);
  int s2 = digitalRead(S2);
  int s3 = digitalRead(S3);
  int s4 = digitalRead(S4);
  int s5 = digitalRead(S5);
  
  // Calculate error value based on sensor readings
  int error = (s1 * -2) + (s2 * -1) + (s3 * 0) + (s4 * 1) + (s5 * 2);

  // Calculate motor speeds based on error value
  int leftSpeed = BASE_SPEED + (error * CORRECTION_FACTOR);
  int rightSpeed = BASE_SPEED - (error * CORRECTION_FACTOR);

  // Ensure motor speeds are within limits
  leftSpeed = constrain(leftSpeed, 0, MAX_SPEED);
  rightSpeed = constrain(rightSpeed, 0, MAX_SPEED);

  // Set motor directions
  if (leftSpeed > 0) {
    digitalWrite(IN1, HIGH);
    digitalWrite(IN2, LOW);
  } else {
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, HIGH);
    leftSpeed = -leftSpeed;
  }

  if (rightSpeed > 0) {
    digitalWrite(IN3, HIGH);
    digitalWrite(IN4, LOW);
  } else {
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, HIGH);
    rightSpeed = -rightSpeed;
  }

  // Set motor speeds using PWM (analogWrite)
  analogWrite(ENA, leftSpeed);
  analogWrite(ENB, rightSpeed);
  
  // Debugging output (optional)
  Serial.print("Error: "); Serial.print(error);
  Serial.print(" Left Speed: "); Serial.print(leftSpeed);
  Serial.print(" Right Speed: "); Serial.println(rightSpeed);

  delay(10);
}
